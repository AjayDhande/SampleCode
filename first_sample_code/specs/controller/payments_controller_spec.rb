require 'rails_helper'
require 'byebug'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PaymentsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Payment. As you add validations to Payment, be sure to
  # adjust the attributes here as well.



  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }


  let(:valid_card_attributes){
    {
      card_number: '4111111111111111',
      card_exp_month: '12',
      card_exp_year: '2019',
      name_on_card: 'John Doe'
    }
  }

  let(:invalid_card_attributes){
    {
      card_number: 'w131231232321',
      card_exp_month: '1222323',
      card_exp_year: '232323',
      name_on_card: 'John Doe'
    }
  }

  let(:valid_bank_details){
    {
      bank_account_name: 'John Doe',
      bank_account_bsb: '012-003',
      bank_account_number: '001234000'
    }
  }

  let(:invalid_bank_details){
    {
      bank_account_name: 'John Doe',
      bank_account_bsb: 'sad@asaa78',
      bank_account_number: 'wew@69nns'
    }
  }

  before :each do
    @user = User.find_by_email('l4@customer.com.au')
    sign_in @user
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PaymentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all payments as @payments" do
      payment = Payment.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:payments)).to eq([payment])
    end
  end

  describe "GET #show" do
    it "assigns the requested payment as @payment" do
      payment = Payment.create! valid_attributes
      get :show, params: {id: payment.to_param}, session: valid_session
      expect(assigns(:payment)).to eq(payment)
    end
  end

  # To test new ezidebit payment
  describe "GET #new" do
    it "should check whether new payment is done." do
      get :new, params: { task: 'done' }
      expect(response.cookies['new_payment']).to eq('done')
    end

    it "should return alert message if invoice is not created for particular user." do
      get :new
      expect(flash[:alert]).to eq('Invoice is not created.')
    end

    it "should get the new object with 200 response code." do
      organization = @user.organisations.create(name: 'John', email: 'john@gmail.com', insightly_id: '1', content: 'hello')
      service = organization.services.create!(service_line_id: '1', name: 'John', permalink: 'www.john.com', number_of_user_allowed: 2, start_date: '2018-01-01', insightly_id: '1')
      invoice = service.invoices.create(amount: 100, invoice_type: 'INV')

      invoices = []
      @user.organisations.each do |organisation|
        organisation.services.each do |service|
          invoices << service.invoices
        end
      end
      invoices = Invoice.where(id: invoices.flatten.pluck(:id)).order(:created_at)
      invoices.first
      expect(invoices.first.blank?).to eq(false)
    end

    it "should get the alert message for already payment" do
      payment = @user.create_payment(customer_token: '13213Sd2312')
      flash[:alert] = 'Initial payment setup already has been done.' if !payment.id.blank?
      expect(flash[:alert]).to eq('Initial payment setup already has been done.')
    end
  end

  # To test create ezidebit payment response.
  describe "POST #create" do
    it 'should create payment with customer token' do
      post :create, params: { payment: {customer_token: '29T47213SD4R2T'} }
      expect(JSON.parse(response.body)["status"]).to eq('created')
    end

    it 'should check for unprocessable_entity' do
      post :create, params: { payment: {customer_token: ''} }
      expect(JSON.parse(response.body)["status"]).to eq('unprocessable_entity')
    end

    it 'should check already payment done' do
      payment = @user.create_payment(customer_token: '13213Sd2312')
      flash[:alert] = 'Initial payment setup already has been done.' if @user.payment.id.eql?(payment.id)
      expect(flash[:alert]).to eq('Initial payment setup already has been done.')
    end    
  end

  describe "GET #edit" do
    it "assigns the requested payment as @payment" do
      payment = Payment.create! valid_attributes
      get :edit, params: {id: payment.to_param}, session: valid_session
      expect(assigns(:payment)).to eq(payment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Payment" do
        expect {
          post :create, params: {payment: valid_attributes}, session: valid_session
        }.to change(Payment, :count).by(1)
      end

      it "assigns a newly created payment as @payment" do
        post :create, params: {payment: valid_attributes}, session: valid_session
        expect(assigns(:payment)).to be_a(Payment)
        expect(assigns(:payment)).to be_persisted
      end

      it "redirects to the created payment" do
        post :create, params: {payment: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Payment.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved payment as @payment" do
        post :create, params: {payment: invalid_attributes}, session: valid_session
        expect(assigns(:payment)).to be_a_new(Payment)
      end

      it "re-renders the 'new' template" do
        post :create, params: {payment: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested payment" do
        payment = Payment.create! valid_attributes
        put :update, params: {id: payment.to_param, payment: new_attributes}, session: valid_session
        payment.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested payment as @payment" do
        payment = Payment.create! valid_attributes
        put :update, params: {id: payment.to_param, payment: valid_attributes}, session: valid_session
        expect(assigns(:payment)).to eq(payment)
      end

      it "redirects to the payment" do
        payment = Payment.create! valid_attributes
        put :update, params: {id: payment.to_param, payment: valid_attributes}, session: valid_session
        expect(response).to redirect_to(payment)
      end
    end

    context "with invalid params" do
      it "assigns the payment as @payment" do
        payment = Payment.create! valid_attributes
        put :update, params: {id: payment.to_param, payment: invalid_attributes}, session: valid_session
        expect(assigns(:payment)).to eq(payment)
      end

      it "re-renders the 'edit' template" do
        payment = Payment.create! valid_attributes
        put :update, params: {id: payment.to_param, payment: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested payment" do
      payment = Payment.create! valid_attributes
      expect {
        delete :destroy, params: {id: payment.to_param}, session: valid_session
      }.to change(Payment, :count).by(-1)
    end

    it "redirects to the payments list" do
      payment = Payment.create! valid_attributes
      delete :destroy, params: {id: payment.to_param}, session: valid_session
      expect(response).to redirect_to(payments_url)
    end
  end



  ##########Credit card rspecs#############

  describe "GET #new_credit_card_details" do
    it "assigns a new credit_card as @creditcard" do
      get :new, params: {}, session: valid_session
      expect(assigns(:credit_card)).to be_a_new(CreditCard)
    end
  end


  describe "POST #credit_card_details" do
    context "with valid params" do
      it "creates a new CreditCard" do
        expect {
          post :create, params: {credit_card: valid_card_attributes}, session: valid_session
        }.to change(CreditCard, :count).by(1)
      end

      it "assigns a newly created credit_card as @credit_card" do
        post :create, params: {credit_card: valid_card_attributes}, session: valid_session
        expect(assigns(:credit_card)).to be_a(CreditCard)
        expect(assigns(:credit_card)).to be_persisted
      end

      it "redirects to the home page with success message" do
        post :create, params: {credit_card: valid_card_attributes}, session: valid_session
        expect(response).to redirect_to(root_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved credit_card as @credit_card" do
        post :create, params: {credit_card: invalid_card_attributes}, session: valid_session
        expect(assigns(:credit_card)).to be_a_new(CreditCard)
      end

      it "re-renders the 'new_credit_card_details' template" do
        post :create, params: {credit_card: invalid_card_attributes}, session: valid_session
        expect(response).should redirect_to(new_payment_path)
      end
    end
  end


  describe "GET #edit_credit_card_details" do
    it "assigns the requested credit_card as @credit_card" do
      credit_card = CreditCard.create! valid_card_attributes
      get :edit, params: {id: credit_card.to_param}, session: valid_session
      expect(assigns(:credit_card)).to eq(credit_card)
    end
  end

  describe "PUT #update_credit_card_details" do
    context "with valid params" do
      it "assigns the requested credit_card as @credit_card" do
        credit_card = CreditCard.create! valid_card_attributes
        put :update, params: {id: credit_card.to_param, credit_card: valid_card_attributes}, session: valid_session
        expect(assigns(:credit_card)).to eq(credit_card)
      end

      it "redirects to the credit_card" do
        credit_card = CreditCard.create! valid_card_attributes
        put :update, params: {id: credit_card.to_param, credit_card: valid_card_attributes}, session: valid_session
        expect(response).to redirect_to(credit_card)
      end
    end

    context "with invalid params" do
      it "assigns the credit_card as @credit_card" do
        credit_card = CreditCard.create! invalid_card_attributes
        put :update, params: {id: credit_card.to_param, credit_card: invalid_card_attributes}, session: valid_session
        expect(assigns(:credit_card)).to eq(credit_card)
      end

      it "re-renders the 'new_payment' template" do
        credit_card = CreditCard.create! invalid_card_attributes
        put :update, params: {id: credit_card.to_param, credit_card: invalid_card_attributes}, session: valid_session
        expect(response).to render_template("new_payment")
      end
    end
  end

  ##########Bank Account rspecs#############

  describe "GET #new_bank_account_details" do
    it "assigns a new bank_account_detail as @bank_account_detail" do
      get :new, params: {}, session: valid_session
      expect(assigns(:bank_account_detail)).to be_a_new(BankAccountDetail)
    end
  end

  describe "POST #bank_account_details" do
    context "with valid params" do
      it "Creats a new bank account details" do
        expect{
          post :create, params: {bank_account_detail: valid_bank_details}, session: valid_session
        }.to change(BankAccountDetail, :count).by(1)
      end

      it "assigns a newly created bank_account_detail as @bank_account_detail" do
        post :create, params: {bank_account_detail: valid_bank_details}, session: valid_session
        expect(assigns(:bank_account_detail)).to be_a(BankAccountDetail)
      end

      it "redirects to the home page with success message" do
        post :create, params: {bank_account_detail: valid_bank_details}, session: valid_session
        expect(response).to redirect_to(root_path)
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved bank_account_detail as @bank_account_detail" do
          post :create, params: {bank_account_detail: invalid_bank_details}, session: valid_session
          expect(response).to redirect_to(root_path)
        end

        it "re-renders the 'new_bank_account_details' template" do
          post :create, params: {bank_account_detail: invalid_bank_details}, session: valid_session
          expect(response).should redirect_to(new_payment_path)
        end
      end
    end
  end

  describe "GET #edit_bank_account_details" do
    it "assigns the requested bank_account_detail as @bank_account_detail" do
      bank_account_detail = BankAccountDetail.create! valid_bank_details
      get :edit, params: {id: bank_account_detail.to_param}, session: valid_session
      expect(assigns(:bank_account_detail)).to eq(bank_account_detail)
    end
  end

  describe "PUT #update_bank_account_details" do
    context "with valid params" do
      it "assigns the requested bank_account_detail as @bank_account_detail" do
        bank_account_detail = BankAccountDetail.create! valid_bank_details
        put :update, params: {id: bank_account_detail.to_param, bank_account_detail: valid_bank_details}, session: valid_session
        expect(assigns(:bank_account_detail)).to eq(bank_account_detail)
      end

      it "redirects to the bank_account_detail" do
        bank_account_detail = BankAccountDetail.create! valid_bank_details
        put :update, params: {id: bank_account_detail.to_param, bank_account_detail: valid_bank_details}, session: valid_session
        expect(response).to redirect_to(root_path)
      end
    end

    context "with invalid params" do
      it "assigns the requested bank_account_detail as @bank_account_detail" do
        bank_account_detail = BankAccountDetail.create! invalid_bank_details
        put :update, params: {id: bank_account_detail.to_param, bank_account_detail: invalid_bank_details}, session: invalid_bank_details
        expect(assigns(:bank_account_detail)).to eq(bank_account_detail)
      end

      it "re-renders the new_payment template" do
        bank_account_detail = BankAccountDetail.credit! invalid_bank_details
        put :update, params: {id: bank_account_detail.to_param, bank_account_detail: invalid_bank_details}, session: invalid_bank_details
        expect(response).to render_template("new_payment")
      end
    end
  end

end